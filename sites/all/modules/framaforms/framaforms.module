<?php

/**
 * Implements hook_menu.
 * Declares an administration menu, accessible only to admin.
 *
 * @return void
 */
function framaforms_menu () {
  $items = array();
  $items['admin/config/system/framaforms'] = array(
    'title' => 'Configurer Framaforms',
    'description' => t('Configuration du module Framaforms'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('framaforms_config_form'),
    'access arguments' => array('access administration pages'),
    'type' => MENU_CALLBACK,
    'file' => 'includes/framaforms.admin.inc',
  );
  $items['admin/framaforms/dashboard'] = array(
    'title' => t('Vue d\'ensemble'),
    'description' => t('Dashboard générale contenant différentes statistiques sur Framaforms.'),
    'page callback' => 'get_dashboard_content',
    'access arguments' => array('access administration pages'),
    'type' => MENU_NORMAL_ITEM,
    'weight' => -60,
    'file' => 'includes/framaforms.admin.inc',
  );
  $items['expiration'] = array(
    'title' => t('Expiration'),
    'description' => t("Page d'instructions pour partager un formulaire."),
    'page callback' => 'get_expiration_content',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('access content'),
    'file' => 'includes/framaforms.pages.inc',
  );
  $items['content/share'] = array(
    'title' => t('Partager'),
    'description' => t('Page de redirection lors de l\'expiration d\'un formulaire.'),
    'page callback' => 'get_share_content',
    'type' => MENU_NORMAL_ITEM,
    'access arguments' => array('access content'),
    'file' => 'includes/framaforms.pages.inc',
  );
  return $items;
}

/**
 * Implements hook_block_info : defines Framaforms-specific blocks.
 *
 * @return void
 */
function framaforms_block_info () {
  // block : contact form link at the bottom of the form.
  $blocks['framaforms_contact_form_block'] = array(
    'info' => t('Lien vers le formulaire de contact'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'status' => TRUE,
    'region' => 'content',
    'weight' => 10,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "node/*"
  );
  // block : alert block about passwords.
  $blocks['framaforms_no_password'] = array(
    'info' => t('Alerte mot de passe'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'status' => TRUE,
    'region' => 'content',
    'weight' => 20,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "node/*"
  );
  // block : General header with Framaforms title
  $blocks['framaforms_header'] = array(
    'info' => t('En-tête général'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'status' => TRUE,
    'region' => 'highlighted',
    'weight' => 10,
  );
  // block : header with links for a logged-in user.
  $blocks['framaforms_user_header'] = array(
    'info' => t('Liens utilisateurs'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'status' => TRUE,
    'region' => 'highlighted',
    'weight' => 20,
    'visibility' => BLOCK_VISIBILITY_NOTLISTED,
    'pages' => "node/add\nnode/add/*",
  );
  // block : header with links for an anonymous user.
  $blocks['framaforms_anonymous_header'] = array(
    'info' => t('Liens utilisateur anonyme'),
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'status' => TRUE,
    'region' => 'highlighted',
    'weight' => 30,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "<front>\nfonctionnalites\nuser\nuser/*\ndocs/*",
  );
  // block : warning for a user when creating a form
  $blocks['framaforms_create_form'] = array(
    'info' => t('Création de formulaire'),
    'title' => 'Création',
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'status' => TRUE,
    'region' => 'highlighted',
    'weight' => 40,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "node/add/form1",
  );
  // block : account information page.
  $blocks['framaforms_my_account'] = array(
    'info' => t('Mon compte Framaforms'),
    'title' => 'Mon compte Framaforms',
    'cache' => DRUPAL_CACHE_PER_USER,
    'status' => TRUE,
    'region' => 'content',
    'weight' => 0,
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "user/\nuser/*",
  );
  $blocks['help_confirmation_email'] = array(
    'info' => t('Aide : mail de confirmation'),
    'title' => 'Confirmation par email',
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'status' => TRUE,
    'region' => 'sidebar_first',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "node/*/webform/confirmation-settings",
  );
  $blocks['help_emails'] = array(
    'info' => t('Aide : Interactions par email'),
    'title' => 'Interactions par email',
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'status' => TRUE,
    'region' => 'sidebar_first',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "node/*/webform/emails",
  );
  $blocks['help_validation'] = array(
    'info' => t('Aide : Conditions de validation'),
    'title' => 'Conditions de validation',
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'status' => TRUE,
    'region' => 'sidebar_first',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "node/*/webform/validation",
  );
  $blocks['help_settings'] = array(
    'info' => t('Aide : Paramètres du formulaire'),
    'title' => 'Paramètres du formulaire',
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'status' => TRUE,
    'region' => 'sidebar_first',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "node/*/webform/configure",
  );
  $blocks['help_conditionnals'] = array(
    'info' => t('Aide : Champs conditionnels'),
    'title' => 'Champs conditionnels',
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'status' => TRUE,
    'region' => 'sidebar_first',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "node/*/webform/conditionals",
  );
  $blocks['help_form1_creation'] = array(
    'info' => t('Aide : Création'),
    'title' => 'Création d\'un formulaire',
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'status' => TRUE,
    'region' => 'sidebar_first',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "node/add/form1\nnode/*/edit",
  );
  $blocks['help_generic'] = array(
    'info' => t('Aide : Générale'),
    'title' => 'Aide',
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'status' => TRUE,
    'region' => 'sidebar_first',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "node/*/view",
  );
  $blocks['help_form1_webform'] = array(
    'info' => t('Aide : Création du formulaire'),
    'title' => 'Création du formulaire',
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'status' => TRUE,
    'region' => 'sidebar_first',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "node/*/webform\nnode/*/webform/form-builder",
  );
  $blocks['help_form1_webform_components'] = array(
    'info' => t('Aide : Ajoutez des composants'),
    'title' => 'Ajoutez des composants',
    'cache' => DRUPAL_CACHE_PER_PAGE,
    'status' => TRUE,
    'region' => 'sidebar_first',
    'visibility' => BLOCK_VISIBILITY_LISTED,
    'pages' => "node/*/webform/components/new/*\nnode/*/webform/components/*\nnode/*/webform/components",
  );
  $blocks['framaforms_footer'] = array(
    'info' => t('Footer'),
    'title' => 'Fourni par Framaforms',
    'cache' => DRUPAL_CACHE_GLOBAL,
    'status' => TRUE,
    'region' => 'footer',
  );
  return $blocks;
}

/**
* Implements hook_block_view.
* Defines content for Framaforms-specific blocks.
*
* @param string $delta : the block identifier.
* @return void
*/
function framaforms_block_view ($delta) {
  module_load_include('inc', 'framaforms', 'includes/framaforms.block');
  global $user;
  global $base_url;
  $block = array();
  // get the current nid to generate content from there.
  $current_url = $_GET['q'];
  $matches = array();
  preg_match("/node\/([0-9]+)/", $current_url, $matches);
  if(isset($matches[1])){
    $nid = $matches[1] ? $matches[1] : NULL;
  }
  else {
    $nid = NULL;
  }
  // generate content by block ID
  switch($delta) {
    case 'framaforms_contact_form_block':
      // only display this block on form1-type nodes
      if(isset($nid) || !node_is_form1($nid)){
        return;
      }
      // don't show this block on edit pages of form1 nodes
      if(strpos($current_url, 'edit')){
        return;
      }
      if(user_access('access content')){
        // get block content
        $block['content'] = array();
        $block['content']['#markup'] = "";
        $block['content']['#markup'] .= get_contact_form_content($nid);
      }
    break;
    case 'framaforms_no_password' :
      // only display this block on form1-type nodes
      if(isset($nid) || !node_is_form1($nid)){
        return;
      }
      // don't show this block on edit pages of form1 nodes
      if(strpos($current_url, '/edit')){
        return;
      }
      $block['content'] = array(
        '#markup' => t('<i>Ne transmettez aucun mot de passe via Framaforms</i>'),
      );
    break;
    case 'framaforms_header':
      // if the current page is of node type form1, don't display
      if(isset($nid) && node_is_form1($nid) && !strpos($current_url, '/edit')){
        return;
      }
      $block['content']['#markup'] = '<h1 class="big-title"><a href="/"><b class="frama">Frama</b><b class="vert">forms</b></a></h1>';
      $block['content']['#markup'] .= '<p class="lead">'. variable_get('site_slogan').'</p>';
    break;
    case 'framaforms_anonymous_header':
      // only display to anonymous users
      if(user_is_logged_in()){
        return;
      }
      $block['content']['#markup'] = '<div class="user-block-connect">';
      $block['content']['#markup'] .= '<a href="/user/register" class="btn btn-success btn-sm" role="button">Créer un compte</a>';
      $block['content']['#markup'] .= '&nbsp;&nbsp;&nbsp;&nbsp;';
      $block['content']['#markup'] .= '<a href="/user" class="btn btn-primary btn-sm" role="button">'. t('M\'identifier') .'</a><br/><br/>';
      $block['content']['#markup'] .= '<div>';
      $block['content']['#markup'] .= '<a href="/fonctionnalites" class="btn btn-default btn-sm" role="button">'. t('Fonctionnalités'). '</a>';
      $block['content']['#markup'] .= ' </div> </div>';
      $block['content']['#markup'] .= '</div class="user-block-connect">';
    break;
    case 'framaforms_user_header':
      // only display to logged-in users
      if(!user_is_logged_in()){
        return;
      }
      $block['content']['#markup'] = '<div class="user-block-connect">';
      // button for account settings
      $block['content']['#markup'] .= '<a role="button" class="btn btn-link btn-sm" href="/user/'.$user->uid.'">'.t('Mon compte'). ' ('. $user->name .')</a>';
      $block['content']['#markup'] .= "&nbsp;&nbsp;&nbsp;&nbsp;";
      // logout button
      $block['content']['#markup'] .= '<a role="button" class="btn btn-danger btn-sm"href="/user/logout">' .t('Déconnexion') .'</a>';
      $block['content']['#markup'] .= "<br /><br />";
      $block['content']['#markup'] .= '<a href="/fonctionnalites" class="btn btn-default btn-sm" role="button">'. t('Fonctionnalités') .'</a>';
      $block['content']['#markup'] .= "&nbsp;&nbsp;&nbsp;&nbsp;";
      $block['content']['#markup'] .= '<a href="/node/add/form1" class="btn btn-primary btn-sm" role="button">' . t('Créer un formulaire vierge') .'</a>';
      $block['content']['#markup'] .= "&nbsp;&nbsp;&nbsp;&nbsp;";
      $block['content']['#markup'] .= '<a href="/templates" class="btn btn-primary btn-sm" role="button">'. t('Créer un formulaire depuis un modèle').'</a>';
      $block['content']['#markup'] .= "&nbsp;&nbsp;&nbsp;&nbsp;";
      $block['content']['#markup'] .= '<a role="button" class="btn btn-primary btn-sm" href="/user/'.$user->uid.'/forms">' . t('Mes formulaires'). '</a>';
      $block['content']['#markup'] .= "<br/>";
      $block['content']['#markup'] .= "&nbsp;&nbsp;&nbsp;&nbsp;";
      $block['content']['#markup'] .= '</div class="user-block-connect">';
    break;
    case 'framaforms_my_account':
      // don't show this block on the "edit" page
      if(strpos($current_url, 'edit')){
        return;
      }
      $block['content']['#markup'] = '<p>' .t('Bienvenue sur votre compte Framaforms !') .'</p>';
      $block['content']['#markup'] .= '<p>'. t('Vous pouvez :'). '</p>';
      $block['content']['#markup'] .= '<ul>';
      $block['content']['#markup'] .= '<li>'. t('modifier vos informations personnelles (onglet "Modifier" ci-dessus) ;') .'</li>';
      $block['content']['#markup'] .= '<li>'. t('lister formulaires que vous avez créés (Bouton "Mes formulaires" ci-dessus) ;') .'</li>';
      $block['content']['#markup'] .= '<li> <a href="/node/add/form1">'. t('créer un nouveau formulaire') .'</a></li>';
      $block['content']['#markup'] .= '<li> <a href="'. variable_get('site_contact_url').'">'. t('nous contacter') .'</a></li>';
      $block['content']['#markup'] .= '</ul>';
    break;
    case 'framaforms_create_form':
      $block['content']['#markup'] = t("<p>Vous allez créer ou modifier un formulaire.<br />
        Commencez par remplir les champs ci-dessous, puis cliquez sur « Enregistrer ».<br />
        <b>NB : le titre est important, car il sera partiellement repris dans le titre. Le changer changera l'adresse du formulaire !</b></p>");
    break;
    case 'help_confirmation_email':
      if(!user_is_logged_in()){
        return;
      }
      $block['content']['#markup'] = t("Ici, vous pouvez indiquer combien de temps l'email de confirmation sera valable (si vous utilisez cette option), et si vous souhaitez qu'à ce terme la soumission soit détruite.");
      $block['content']['#markup'] .= "<br><br>";
      $block['content']['#markup'] .= t("NB importante : si vous souhaitez utiliser les options de configuration, c'est dans l'onglet « Courriels » que cela ce passe :)");
    break;
    case 'help_emails':
      if(!user_is_logged_in()){
        return;
      }
      $block['content']['#markup'] = t("Cette fonctionnalité permet, a minima, d'envoyer un courriel à une adresse donnée.
      Par exemple pour envoyer, à chaque soumission du formulaire, un courriel au créateur du formulaire, indiquant qu'un formulaire a été soumis.
      Ce courriel <em>peut</em> contenir les valeurs saisies par le participant.") . "<br>";
      $block['content']['#markup'] .= t("Mais surtout, ce module permet de mettre en place une procédure de confirmation par courriel.") . "<br>";
      $block['content']['#markup'] .= t("Ainsi, si l'utilisateur soumet un formulaire, il recevra un courriel avec un lien de validation. Tant qu'il n'aura pas cliqué sur ce lien, son formulaire ne sera pas comptabilisé dans les résultats (il sera enregistré, mais pas validé).
      Cela peut être très utile dans le cas où vous souhaiteriez vous assurer que tous les participants ont des courriels valides.") . "<br>";
      $block['content']['#markup'] .= "<strong>" . t("Attention : pour utiliser la confirmation, votre formulaire doit obligatoirement comporter un composant « courriel »") . "</strong>";
      $block['content']['#markup'] .= t(" (ben oui, sinon, comment voulez vous qu'on envoie le mail au participant ? :P)");
    break;
    case 'help_validation':
      if(!user_is_logged_in()){
        return;
      }
      $block['content']['#markup'] = t("(réservé plutôt aux utilisateurs avancés) <br>
      Ici, vous pouvez définir des conditions de validation du formulaire en fonction des choix de l'utilisateur.
      Si ces conditions ne sont pas remplies, le formulaire n'est pas validé. Il est resoumis à l'utilisateur jusqu'à correspondre aux conditions.<br>
      <strong>Cas d'usages : </strong><ul>
      <li>Vous voulez que le nombre maximum de caractères d'une zone de texte soit inférieur à 200 caractères</li>
      <li>Vous voulez interdire certains mots dans une zone de texte</li>
      <li>Vous voulez comparer que « taille (cm) à 5 ans » est plus petit que « taille (cm) à 20 ans »</li>
      <li>Vous voulez vous assurer « Nom du projet » commence par les lettres « Frama »</li>
      <li>etc</li>");
    break;
    case 'help_settings':
      if(!user_is_logged_in()){
        return;
      }
      $block['content']['#markup'] = t("
      On ne rigole plus là, hein ? :)<br>
      On rentre dans le dur de la configuration avancée du formulaire.<br>
      Avantage : la configuration par défaut convient dans 90% des cas.<br>
      Inconvénient : si vous touchez à quelques chose qu'il ne fallait pas, ne venez pas vous plaindre (bon, vous ne prenez que le risque de ne casser *que* ce formulaire, alors au pire il suffira d'en recréer un ! :)<br>
      ");
    break;
    case 'help_conditionnals':
      if(!user_is_logged_in()){
        return;
      }
      $block['content']['#markup'] = t("
      Les champs conditionnels vous permettent d'effectuer des actions en fonction de certaines valeurs saisies par l'utilisateur.
      Exemples :<br>
      <strong>afficher ou masquer des champs : </strong><br>
      SI l'utilisateur sélectionne le champs <em>«Autre»</em> dans le menu <em>«Types de structure»</em>
      ALORS faire apparaître le champ <em>«Autre type de structure»</em><br>
      SI l'utilisateur coche le bouton <em>«Je n'aime pas la purée»</em>
      ALORS cacher le menu <em>«Quelle est votre purée préférée ?»</em>.<br>
      <strong>Forcer une valeur : </strong><br>
      SI l'utilisateur coche la case <em>«J'ai reçu au moins 3 cadeaux à Noël»</em>
      ALORS automatiquement cocher la réponse <em>«Oui»</em> pour la case <em>«J'ai de la chance»</em>.<br>
      <strong>Forcer le remplissage d'un champ</strong>
      SI l'utilisateur a coché la case <em>«Je suis allé dans l'espace»</em>
      ALORS rendre le champ <em>«Sur quelle planète»</em> olibgatoire.<br>
      <a href='docs/champs_conditionnels/'>Plus dinformations</a>
      ");
    break;
    case 'help_form1_creation':
      if(!user_is_logged_in()){
        return;
      }
      $block['content']['#markup'] = t("
      Remplissez les informations de description de votre formulaire, puis cliquez sur «enregistrer» pour passer à l'étape de création des champs de formulaires.<br><br>
      Une fois validé, cliquez sur l'onglet « Formulaire » <strong>qui n'apparaîtra qu'une fois la description enregistrée !</strong>");
    break;
    case 'help_generic':
      if(!user_is_logged_in()){
        return;
      }
      $block['content']['#markup'] = t("Cliquez sur l'onglet « Formulaire » pour poursuivre la création de formulaire...");
    break;
    case 'help_form1_webform':
      if(!user_is_logged_in()){
        return;
      }
      $block['content']['#markup'] = t("
        <p>C'est parti !<br/>
        Choisissez les éléments de votre formulaire.<br/>
        Vous pouvez cliquer ou glisser-déplacer les éléments de formulaire situés à droite dans la zone de prévisualisation pour construire votre formulaire.<br/>
        Par ailleurs, vous pouvez sélectionner les options avancées en utilisant les sous-onglets «Champs conditionnels», «Courriels», «Paramètres du formulaire», etc.</p>
        <p>Attention toutefois : il est déconseillé de modifier un formulaire (modifier son titre ou supprimer des champs) une fois que vous aurez obtenu vos premières réponses. Vous risqueriez de perdre des données.</p>
      ");
    break;
    case 'help_form1_webform_components':
      if(!user_is_logged_in()){
        return;
      }
      $block['content']['#markup'] = t("
        Vous pouvez ici définir les mêmes composants que dans le formulaire «graphique», mais de façon plus... «manuelle».
        L'avantage, c'est que l'édition des champs fonctionne mieux sur mobile.");
    break;
    case 'framaforms_footer':
      $block['content']['#markup'] = t("<u><a href='https://framaforms.org'>Framaforms</a></u> est un service en ligne libre, gratuit, sans publicité et respectueux de vos données permettant de générer des formulaires (sondages, enquêtes, pétitions, etc.).") . "<br>";
      $block['content']['#markup'] .= t("Ce service (et bien d'autres) vous est proposé par l'association <u><a href='https://framasoft.org/fr/'>Framasoft</a></u>, dans le cadre de sa campagne « <u><a href='https://degooglisons-internet.org/fr/'>Dégooglisons Internet</a></u> ».") . "<br>";
      $block['content']['#markup'] .= t("Ce contenu n'est ni rédigé, ni cautionné par Framaforms. <u><a href='https://contact.framasoft.org/#framaforms'>Signaler un cas d'utilisation abusive.<a></u><br>");
      $block['content']['#markup'] .= t("Framaforms est propulsé par <u><a href='https://www.drupal.org/'>Drupal</a></u>.");
    break;
  }
  return $block;
}

/**
* Implements hook_form_alter :
* Disable wysiwyg on markup widget and add protection before leaving
*/
function framaforms_form_alter(&$form, &$form_state, $context) {
  $form_id['edit-markup-value']['#wysiwyg'] = FALSE;
  $form_id['edit-markup-value']['und'][0]['#wysiwyg'] = false;
  $form_id['markup']['#wysiwyg'] = FALSE;
  $form_id['markup']['und'][0]['#wysiwyg'] = false;
  $form_id['form-builder-element-markup']['#type'] = 'text_format';
}

function framaforms_preprocess_page(&$vars, $hook) {
   $url = url("<front>", array('absolute' => TRUE)); //get base URL of the current website
   // if the current base url contain  "framaforms.org", add the framanav
   if( strpos( $url, "framaforms.org" ) !== false) {
     drupal_add_js('https://framasoft.org/nav/nav.js', 'external');
   }
   $meta_element = array(
    '#tag' => 'meta', // The #tag is the html tag -
    '#attributes' => array( // Set up an array of attributes inside the tag
      'name' => 'viewport',
      'content' => 'width=device-width, initial-scale=1.0"',
    ),
);
   drupal_add_html_head($meta_element, 'meta-responsive');
}

/**
 * Implements hook_webform_submission_load :
 * anonymizes the webform submissions for the author to see.
 */
function framaforms_webform_submission_load(&$submissions) {
  global $user;
  $submission = current($submissions);

  if (in_array('administrator', $user->roles)) {
    // do we need to anonymze ?

  } else {
      foreach ($submissions as $sid => $submission) {
      // If called for, anonymize uid and ip of submission before display.
      $submission->uid = 0;
      $submission->name = 'Anonymous';
      $submission->remote_addr = '0.0.0.0';
    }
  }
}

/**
* Implemements hook_views_access_callbacks :
* Add specific views access if the visitor is the author of the node
*/
function framaforms_views_access_callbacks() {
  return array(
    'framaforms_user_has_access' => t('Current user is author of the node'),
  );
}

/**
 * Callback for framaforms_views_access_callbacks : returns true
 * if the current user is the author of the node.
 * @param [type] $account
 * @return void
 */
function framaforms_user_has_access($account = NULL) {
  global $user;
  $node = node_load(arg(1));
  if ( (isset($node->uid, $GLOBALS['user']->uid) && $GLOBALS['user']->uid == $node->uid && $GLOBALS['user']->uid > 0) || (user_has_role(3) ) ) {
    return TRUE;
  }
  return FALSE;
}

/**
 * Implements of hook_mail() :
 * Sends framaforms-specific mails.
 */
function framaforms_mail($key, &$message, $params) {
  switch($key){
    case 'expired_webform':
      if (isset($params['subject'])) {
        $message['subject'] = $params['subject'];
      }
      if (isset($params['body'])) {
        $message['body'][] = $params['body'];
      }
      if (isset($params['headers']) && is_array($params['headers'])) {
        $message['headers'] += $params['headers'];
      }
    break;
  }
}

/**
 * Implements hook_cron :
 * Checks for webforms about to expire (following intervals defined in variables) and send an email
 * to its owner. Deletes expired forms after a period of inactivity.
 */
function framaforms_cron(){
    module_load_include('inc', 'framaforms', 'includes/framaforms.expiration');
    global $user;
    /**
     * Parameter for adjusting cron frequency.
     */
    $framaforms_cron_last = variable_get('framaforms_cron_last'); // the last time the cron task was run.
    $cron_limit = new DateTime();
    $cron_limit->setTimestamp($framaforms_cron_last);
    $cron_limit->modify('+'.variable_get('framaforms_cron_frequency'));
    $now = new DateTime();

    // if the cron was executed less than 24h ago, do nothing.
    if($now < $cron_limit){
      return;
    }
    // else, proceed to cron.
    watchdog('framaforms', "Tâche cron lancée.");
    variable_set('framaforms_cron_last', $now->getTimestamp());

    /**
     * Handle expired nodes
     */
    make_forms_expire(); // Look in node table for nodes about to expire, and notify the users.
    update_modified_nodes(); // Look in the node table for nodes whose expiration date got changed by the user
    delete_expired_nodes(); // Delete expired nodes after a period of inactivity

    framaforms_delete_possible_spam();
}

/**
 * Deletes from database forms that were considered as potential spam (unpublished)
 * and that were not changed for a period of time
 *
 * @return void
 */
function framaforms_delete_possible_spam () {
  $max_possible_spam_lifetime = variable_get('framaforms_suspicious_form_deletion');
  $query = "SELECT nid
    FROM node
    WHERE status = 0
    AND type = 'form1'
    AND to_timestamp(changed) < NOW() - interval'{$max_possible_spam_lifetime}'";
  try{
    $results = db_query($query)->fetchCol();
    node_delete_multiple($results);
  }
  catch(PDOException $e){
    watchdog("framaforms", "Error deletion potential spam : ".$e);
  }
}

/**
 * Implements hook_node_delete
 */
function framaforms_node_delete ($node) {
  // If the node being deleted is a page, then delete its aliases too
  if($node->type == 'page'){
      db_delete('url_alias')
          ->condition('source', 'node/'.$node->nid)
          ->execute();
  }
}

/**
 * Implements hook_node_insert.
 *
 * @param $node : the node that was published
 * @return void
 */
function framaforms_node_presave($node) {
  // Check newly created form nodes for webform components. If no webfom components were inserted, unpublish the form.
  // Only checking nodes where nid != NULL because we only want to consider fully created nodes.
  if($node->type == 'form1' && $node->nid != NULL && $node->webform['components'] == array()) {
    $node->status = 0; // Unpublish the form node - it won't be accessibly to the public.
    drupal_set_message(t("Your form was created empty. It is considered as spam, and will soon be deleted automatically. Please insert at least one form field to prove this content is legitimate."), 'warning');
  }

  // Republish nodes that were previously considered as spam where components were added
  if($node->status == 0 && $node->webform['components'] != array()){
    $node->status = 1; // Publish the content
    drupal_set_message(t("Your form is now considered as legitimate, and is accessible publicly."), 'status');
  }
}

/**
 * Implements hook_node_insert.
 * Check title for suspicious words in new form titles.
 * @param [type] $node
 * @return void
 */
function framaforms_node_insert ($node) {
  // Regex containing suspicious words
  $suspicious_words = "%(free|watch|online|movie|pelicula|completa|streaming|1080|fortnite|tiktok|mulan|poker)%";
  if($node->type == 'form1' && $node->nid != NULL && preg_match($suspicious_words, strtolower($node->title)) != 0){
    $node->status = 0; // Unpublish the form node - it won't be accessibly to the public.
    drupal_set_message(t("Your form contains suspicious words and is therefore considered as spam. The site's administrators will review it shortly."), 'warning');
  }
}

/**
 * Implements hook_views_api
 *
 * @return void
 */
function framaforms_views_api () {
  return array(
    'api' => 3,
  );
}

/**
 * Implements hook_views_default_views
 *
 * @return void
 */
function framaforms_views_default_views () {
  module_load_include('inc', 'framaforms', 'includes/framaforms.views');
  $views = array();
  $views['possible-spam'] = return_possible_spam_view_definition();
  return $views;
}